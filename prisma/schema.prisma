datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  games    Game[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Player {
  id    String      @id @default(cuid())
  name  String      @unique
  games GameTable[]
  round Round[]
}

model Game {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  rounds    Round[]
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  players   GameTable[]
  isActive  Boolean     @default(false)
}

model GameTable {
  game     Game   @relation(fields: [gameId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  position Int
  gameId   String
  playerId String

  @@id([gameId, playerId])
  @@unique([gameId, playerId, position])
}

model Round {
  number   Int
  gameId   String
  game     Game   @relation(fields: [gameId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  playerId String

  gameType          String
  colorGameResult   ColorGameResult?
  hundredGameResult HundredGameResult?
  trickGameResult   TrickGameResult?
  seven             Seven?

  cost Int

  @@id([gameId, number])
  @@unique([gameId, number, playerId])
}

model ColorGameResult {
  gameId      String
  roundNumber Int
  round       Round  @relation(fields: [gameId, roundNumber], references: [gameId, number], onDelete: Cascade)

  flekCount    Int
  gameOfHearts Boolean

  marriagePlayer     Int @default(0)
  marriageOpposition Int @default(0)

  points Int

  @@id([gameId, roundNumber])
  @@map("round.colorResult")
}

model HundredGameResult {
  gameId      String
  roundNumber Int
  round       Round  @relation(fields: [gameId, roundNumber], references: [gameId, number], onDelete: Cascade)

  contra       Boolean
  gameOfHearts Boolean

  points   Int
  marriage Marriage[]

  @@id([gameId, roundNumber])
  @@map("round.hundredResult")
}

model Seven {
  gameId      String
  roundNumber Int

  round     Round   @relation(fields: [gameId, roundNumber], references: [gameId, number], onDelete: Cascade)
  won       Boolean
  flekCount Int     @default(0)
  silent    Boolean
  // player | opposition
  role      String

  @@id([gameId, roundNumber])
  @@unique([gameId, roundNumber, role])
  @@map("round.seven")
}

model Marriage {
  gameId      String
  roundNumber Int

  hundredGameResult HundredGameResult? @relation(fields: [gameId, roundNumber], references: [gameId, roundNumber])

  spade   Boolean @default(false)
  diamond Boolean @default(false)
  club    Boolean @default(false)
  heart   Boolean @default(false)

  @@id([gameId, roundNumber])
  @@map("round.hundredResult.marriage")
}

model TrickGameResult {
  gameId      String
  roundNumber Int
  round       Round  @relation(fields: [gameId, roundNumber], references: [gameId, number], onDelete: Cascade)

  open Boolean
  won  Boolean

  @@id([gameId, roundNumber])
  @@map("round.trickResult")
}
